Terminals which are not used

   LBRACE
   RBRACE
   IF
   THEN
   ELSE
   WHILE
   FOR
   TO
   DO
   BREAK


State 1 conflicts: 1 shift/reduce
State 89 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: LPAREN RPAREN
    3    | LPAREN seq RPAREN
    4    | MINUS INT
    5    | NIL
    6    | INT
    7    | STRING
    8    | ID LPAREN RPAREN
    9    | ID LPAREN fargs RPAREN
   10    | LET decs IN expseq END
   11    | arr_create
   12    | binop
   13    | lvalue

   14 seq: exp
   15    | seq SEMICOLON exp

   16 expseq: seq
   17       | /* empty */

   18 lvalue: ID
   19       | lvalue DOT ID
   20       | lvalue LBRACK exp RBRACK

   21 fargs: exp
   22      | fargs COMMA exp

   23 binop: exp PLUS exp
   24      | exp MINUS exp
   25      | exp TIMES exp
   26      | exp DIVIDE exp
   27      | exp EQ exp
   28      | exp NEQ exp
   29      | exp LT exp
   30      | exp LE exp
   31      | exp GT exp
   32      | exp GE exp
   33      | exp AND exp
   34      | exp OR exp

   35 decs: /* empty */
   36     | dec
   37     | dec dec

   38 dec: tydec
   39    | vardec
   40    | funcdef

   41 tydec: TYPE ID EQ ty

   42 ty: ID
   43   | LBRACK tyfields RBRACK
   44   | ARRAY OF ID

   45 tyfields: /* empty */
   46         | ID COLON ID
   47         | tyfields COMMA ID COLON ID

   48 vardec: VAR ID ASSIGN exp
   49       | VAR ID COLON ID ASSIGN exp

   50 funcdef: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   51        | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   52 arr_create: ID LBRACK exp RBRACK OF exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 8 9 18 19 41 42 44 46 47 48 49 50 51 52
STRING (259) 7
INT (260) 4 6
COMMA (261) 22 47
COLON (262) 46 47 49 51
SEMICOLON (263) 15
LPAREN (264) 2 3 8 9 50 51
RPAREN (265) 2 3 8 9 50 51
LBRACK (266) 20 43 52
RBRACK (267) 20 43 52
LBRACE (268)
RBRACE (269)
DOT (270) 19
PLUS (271) 23
MINUS (272) 4 24
TIMES (273) 25
DIVIDE (274) 26
EQ (275) 27 41 50 51
NEQ (276) 28
LT (277) 29
LE (278) 30
GT (279) 31
GE (280) 32
AND (281) 33
OR (282) 34
ASSIGN (283) 48 49
ARRAY (284) 44
IF (285)
THEN (286)
ELSE (287)
WHILE (288)
FOR (289)
TO (290)
DO (291)
LET (292) 10
IN (293) 10
END (294) 10
OF (295) 44 52
BREAK (296)
NIL (297) 5
FUNCTION (298) 50 51
VAR (299) 48 49
TYPE (300) 41


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
exp (48)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13, on right: 1 14 15 20 21 22
    23 24 25 26 27 28 29 30 31 32 33 34 48 49 50 51 52
seq (49)
    on left: 14 15, on right: 3 15 16
expseq (50)
    on left: 16 17, on right: 10
lvalue (51)
    on left: 18 19 20, on right: 13 19 20
fargs (52)
    on left: 21 22, on right: 9 22
binop (53)
    on left: 23 24 25 26 27 28 29 30 31 32 33 34, on right: 12
decs (54)
    on left: 35 36 37, on right: 10
dec (55)
    on left: 38 39 40, on right: 36 37
tydec (56)
    on left: 41, on right: 38
ty (57)
    on left: 42 43 44, on right: 41
tyfields (58)
    on left: 45 46 47, on right: 43 47 50 51
vardec (59)
    on left: 48 49, on right: 39
funcdef (60)
    on left: 50 51, on right: 40
arr_create (61)
    on left: 52, on right: 11


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    program     go to state 8
    exp         go to state 9
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 1

    8 exp: ID . LPAREN RPAREN
    9    | ID . LPAREN fargs RPAREN
   18 lvalue: ID .
   52 arr_create: ID . LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 13
    LBRACK  shift, and go to state 14

    LBRACK    [reduce using rule 18 (lvalue)]
    $default  reduce using rule 18 (lvalue)


state 2

    7 exp: STRING .

    $default  reduce using rule 7 (exp)


state 3

    6 exp: INT .

    $default  reduce using rule 6 (exp)


state 4

    2 exp: LPAREN . RPAREN
    3    | LPAREN . seq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 15
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 16
    seq         go to state 17
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 5

    4 exp: MINUS . INT

    INT  shift, and go to state 18


state 6

   10 exp: LET . decs IN expseq END

    FUNCTION  shift, and go to state 19
    VAR       shift, and go to state 20
    TYPE      shift, and go to state 21

    $default  reduce using rule 35 (decs)

    decs     go to state 22
    dec      go to state 23
    tydec    go to state 24
    vardec   go to state 25
    funcdef  go to state 26


state 7

    5 exp: NIL .

    $default  reduce using rule 5 (exp)


state 8

    0 $accept: program . $end

    $end  shift, and go to state 27


state 9

    1 program: exp .
   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 1 (program)


state 10

   13 exp: lvalue .
   19 lvalue: lvalue . DOT ID
   20       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 40
    DOT     shift, and go to state 41

    $default  reduce using rule 13 (exp)


state 11

   12 exp: binop .

    $default  reduce using rule 12 (exp)


state 12

   11 exp: arr_create .

    $default  reduce using rule 11 (exp)


state 13

    8 exp: ID LPAREN . RPAREN
    9    | ID LPAREN . fargs RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 42
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 43
    lvalue      go to state 10
    fargs       go to state 44
    binop       go to state 11
    arr_create  go to state 12


state 14

   52 arr_create: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 45
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 15

    2 exp: LPAREN RPAREN .

    $default  reduce using rule 2 (exp)


state 16

   14 seq: exp .
   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 14 (seq)


state 17

    3 exp: LPAREN seq . RPAREN
   15 seq: seq . SEMICOLON exp

    SEMICOLON  shift, and go to state 46
    RPAREN     shift, and go to state 47


state 18

    4 exp: MINUS INT .

    $default  reduce using rule 4 (exp)


state 19

   50 funcdef: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   51        | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 48


state 20

   48 vardec: VAR . ID ASSIGN exp
   49       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 49


state 21

   41 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 50


state 22

   10 exp: LET decs . IN expseq END

    IN  shift, and go to state 51


state 23

   36 decs: dec .
   37     | dec . dec

    FUNCTION  shift, and go to state 19
    VAR       shift, and go to state 20
    TYPE      shift, and go to state 21

    $default  reduce using rule 36 (decs)

    dec      go to state 52
    tydec    go to state 24
    vardec   go to state 25
    funcdef  go to state 26


state 24

   38 dec: tydec .

    $default  reduce using rule 38 (dec)


state 25

   39 dec: vardec .

    $default  reduce using rule 39 (dec)


state 26

   40 dec: funcdef .

    $default  reduce using rule 40 (dec)


state 27

    0 $accept: program $end .

    $default  accept


state 28

   23 binop: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 53
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 29

   24 binop: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 54
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 30

   25 binop: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 55
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 31

   26 binop: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 56
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 32

   27 binop: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 57
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 33

   28 binop: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 58
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 34

   29 binop: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 59
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 35

   30 binop: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 60
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 36

   31 binop: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 61
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 37

   32 binop: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 62
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 38

   33 binop: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 63
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 39

   34 binop: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 64
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 40

   20 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 65
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 41

   19 lvalue: lvalue DOT . ID

    ID  shift, and go to state 66


state 42

    8 exp: ID LPAREN RPAREN .

    $default  reduce using rule 8 (exp)


state 43

   21 fargs: exp .
   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 21 (fargs)


state 44

    9 exp: ID LPAREN fargs . RPAREN
   22 fargs: fargs . COMMA exp

    COMMA   shift, and go to state 67
    RPAREN  shift, and go to state 68


state 45

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp
   52 arr_create: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 69
    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39


state 46

   15 seq: seq SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 70
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 47

    3 exp: LPAREN seq RPAREN .

    $default  reduce using rule 3 (exp)


state 48

   50 funcdef: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   51        | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 71


state 49

   48 vardec: VAR ID . ASSIGN exp
   49       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 72
    ASSIGN  shift, and go to state 73


state 50

   41 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 74


state 51

   10 exp: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    $default  reduce using rule 17 (expseq)

    exp         go to state 16
    seq         go to state 75
    expseq      go to state 76
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 52

   37 decs: dec dec .

    $default  reduce using rule 37 (decs)


state 53

   23 binop: exp . PLUS exp
   23      | exp PLUS exp .
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    $default  reduce using rule 23 (binop)


state 54

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   24      | exp MINUS exp .
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    $default  reduce using rule 24 (binop)


state 55

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   25      | exp TIMES exp .
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    EQ     shift, and go to state 32
    NEQ    shift, and go to state 33
    LT     shift, and go to state 34
    LE     shift, and go to state 35
    GT     shift, and go to state 36
    GE     shift, and go to state 37
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    $default  reduce using rule 25 (binop)


state 56

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   26      | exp DIVIDE exp .
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    EQ     shift, and go to state 32
    NEQ    shift, and go to state 33
    LT     shift, and go to state 34
    LE     shift, and go to state 35
    GT     shift, and go to state 36
    GE     shift, and go to state 37
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    $default  reduce using rule 26 (binop)


state 57

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   27      | exp EQ exp .
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 27 (binop)


state 58

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   28      | exp NEQ exp .
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 28 (binop)


state 59

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   29      | exp LT exp .
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 29 (binop)


state 60

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   30      | exp LE exp .
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 30 (binop)


state 61

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   31      | exp GT exp .
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 31 (binop)


state 62

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   32      | exp GE exp .
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29
    AND    shift, and go to state 38
    OR     shift, and go to state 39

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 32 (binop)


state 63

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   33      | exp AND exp .
   34      | exp . OR exp

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29

    $default  reduce using rule 33 (binop)


state 64

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp
   34      | exp OR exp .

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29

    $default  reduce using rule 34 (binop)


state 65

   20 lvalue: lvalue LBRACK exp . RBRACK
   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    RBRACK  shift, and go to state 77
    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39


state 66

   19 lvalue: lvalue DOT ID .

    $default  reduce using rule 19 (lvalue)


state 67

   22 fargs: fargs COMMA . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 78
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 68

    9 exp: ID LPAREN fargs RPAREN .

    $default  reduce using rule 9 (exp)


state 69

   52 arr_create: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 79


state 70

   15 seq: seq SEMICOLON exp .
   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 15 (seq)


state 71

   50 funcdef: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   51        | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 80

    $default  reduce using rule 45 (tyfields)

    tyfields  go to state 81


state 72

   49 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 82


state 73

   48 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 83
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 74

   41 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 84
    LBRACK  shift, and go to state 85
    ARRAY   shift, and go to state 86

    ty  go to state 87


state 75

   15 seq: seq . SEMICOLON exp
   16 expseq: seq .

    SEMICOLON  shift, and go to state 46

    $default  reduce using rule 16 (expseq)


state 76

   10 exp: LET decs IN expseq . END

    END  shift, and go to state 88


state 77

   20 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 20 (lvalue)


state 78

   22 fargs: fargs COMMA exp .
   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 22 (fargs)


state 79

   52 arr_create: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 89
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 80

   46 tyfields: ID . COLON ID

    COLON  shift, and go to state 90


state 81

   47 tyfields: tyfields . COMMA ID COLON ID
   50 funcdef: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   51        | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    COMMA   shift, and go to state 91
    RPAREN  shift, and go to state 92


state 82

   49 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 93


state 83

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp
   48 vardec: VAR ID ASSIGN exp .

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 48 (vardec)


state 84

   42 ty: ID .

    $default  reduce using rule 42 (ty)


state 85

   43 ty: LBRACK . tyfields RBRACK

    ID  shift, and go to state 80

    $default  reduce using rule 45 (tyfields)

    tyfields  go to state 94


state 86

   44 ty: ARRAY . OF ID

    OF  shift, and go to state 95


state 87

   41 tydec: TYPE ID EQ ty .

    $default  reduce using rule 41 (tydec)


state 88

   10 exp: LET decs IN expseq END .

    $default  reduce using rule 10 (exp)


state 89

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp
   52 arr_create: ID LBRACK exp RBRACK OF exp .

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    PLUS      [reduce using rule 52 (arr_create)]
    MINUS     [reduce using rule 52 (arr_create)]
    TIMES     [reduce using rule 52 (arr_create)]
    DIVIDE    [reduce using rule 52 (arr_create)]
    EQ        [reduce using rule 52 (arr_create)]
    NEQ       [reduce using rule 52 (arr_create)]
    LT        [reduce using rule 52 (arr_create)]
    LE        [reduce using rule 52 (arr_create)]
    GT        [reduce using rule 52 (arr_create)]
    GE        [reduce using rule 52 (arr_create)]
    AND       [reduce using rule 52 (arr_create)]
    OR        [reduce using rule 52 (arr_create)]
    $default  reduce using rule 52 (arr_create)


state 90

   46 tyfields: ID COLON . ID

    ID  shift, and go to state 96


state 91

   47 tyfields: tyfields COMMA . ID COLON ID

    ID  shift, and go to state 97


state 92

   50 funcdef: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   51        | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 98
    EQ     shift, and go to state 99


state 93

   49 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 100
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 94

   43 ty: LBRACK tyfields . RBRACK
   47 tyfields: tyfields . COMMA ID COLON ID

    COMMA   shift, and go to state 91
    RBRACK  shift, and go to state 101


state 95

   44 ty: ARRAY OF . ID

    ID  shift, and go to state 102


state 96

   46 tyfields: ID COLON ID .

    $default  reduce using rule 46 (tyfields)


state 97

   47 tyfields: tyfields COMMA ID . COLON ID

    COLON  shift, and go to state 103


state 98

   51 funcdef: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 104


state 99

   50 funcdef: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 105
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 100

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp
   49 vardec: VAR ID COLON ID ASSIGN exp .

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 49 (vardec)


state 101

   43 ty: LBRACK tyfields RBRACK .

    $default  reduce using rule 43 (ty)


state 102

   44 ty: ARRAY OF ID .

    $default  reduce using rule 44 (ty)


state 103

   47 tyfields: tyfields COMMA ID COLON . ID

    ID  shift, and go to state 106


state 104

   51 funcdef: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 107


state 105

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp
   50 funcdef: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 50 (funcdef)


state 106

   47 tyfields: tyfields COMMA ID COLON ID .

    $default  reduce using rule 47 (tyfields)


state 107

   51 funcdef: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    LET     shift, and go to state 6
    NIL     shift, and go to state 7

    exp         go to state 108
    lvalue      go to state 10
    binop       go to state 11
    arr_create  go to state 12


state 108

   23 binop: exp . PLUS exp
   24      | exp . MINUS exp
   25      | exp . TIMES exp
   26      | exp . DIVIDE exp
   27      | exp . EQ exp
   28      | exp . NEQ exp
   29      | exp . LT exp
   30      | exp . LE exp
   31      | exp . GT exp
   32      | exp . GE exp
   33      | exp . AND exp
   34      | exp . OR exp
   51 funcdef: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .

    PLUS    shift, and go to state 28
    MINUS   shift, and go to state 29
    TIMES   shift, and go to state 30
    DIVIDE  shift, and go to state 31
    EQ      shift, and go to state 32
    NEQ     shift, and go to state 33
    LT      shift, and go to state 34
    LE      shift, and go to state 35
    GT      shift, and go to state 36
    GE      shift, and go to state 37
    AND     shift, and go to state 38
    OR      shift, and go to state 39

    $default  reduce using rule 51 (funcdef)
